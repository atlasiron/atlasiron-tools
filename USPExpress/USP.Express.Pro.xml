<?xml version="1.0"?>
<doc>
    <assembly>
        <name>USP.Express.Pro</name>
    </assembly>
    <members>
        <member name="T:USP.Express.Pro.Constant">
            <summary>
            A base abstract class for any constant. 
            You must inherit from this class in order to add a user-defined constant to the Constants collection.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Constant.Syntax">
            <summary>Syntax</summary>
        </member>
        <member name="P:USP.Express.Pro.Constant.Description">
            <summary>Description</summary>
        </member>
        <member name="P:USP.Express.Pro.Constant.Group">
            <summary>Group type</summary>
        </member>
        <member name="P:USP.Express.Pro.Constant.Value">
            <summary>Returns the value of the constant. Read-only.</summary>
        </member>
        <member name="P:USP.Express.Pro.Constant.Name">
            <summary>Returns the name of the constant. Read-only.</summary>
        </member>
        <member name="P:USP.Express.Pro.Constant.Type">
            <summary>Type of the Constant. Read-only.</summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.PiConstant">
            <summary>
            Pi.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.EConstant">
            <summary>
            E.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.TrueConstant">
            <summary>
            True.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.FalseConstant">
            <summary>
            False.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.DateInterval">
            <summary>
            When you call date-related functions, you can use enumeration members in your code in place of the actual values.
            The DateInterval enumeration defines constants used with date-related functions to identify how date intervals are determined and formatted. 
            </summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.DateInterval.Year">
            <summary>Year</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.DateInterval.Quarter">
            <summary>Quarter of year (1 through 4)</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.DateInterval.Month">
            <summary>Month (1 through 12) </summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.DateInterval.DayOfYear">
            <summary>Day of year (1 through 366)</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.DateInterval.Day">
            <summary>Day of month (1 through 31)</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.DateInterval.WeekOfYear">
            <summary>Week of year (1 through 53)</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.DateInterval.Weekday">
            <summary>Day of week (1 through 7)</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.DateInterval.Hour">
            <summary>Hour (1 through 24)</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.DateInterval.Minute">
            <summary>Minute (1 through 60)</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.DateInterval.Second">
            <summary>Second (1 through 60)</summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.YearConstant">
            <summary>
            DateInterval.Year.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.QuarterConstant">
            <summary>
            DateInterval.Quarter.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.MonthConstant">
            <summary>
            DateInterval.Month.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.DayOfYearConstant">
            <summary>
            DateInterval.DayOfYear.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.DayConstant">
            <summary>
            DateInterval.Day.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.WeekOfYearConstant">
            <summary>
            DateInterval.WeekOfYear.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.WeekdayConstant">
            <summary>
            DateInterval.Weekday.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.HourConstant">
            <summary>
            DateInterval.Hour.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.MinuteConstant">
            <summary>
            DateInterval.Minute.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.SecondConstant">
            <summary>
            DateInterval.Second.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.FirstDayOfWeek">
            <summary>
            When you call date-related functions, you can use the following enumeration members in your code in place of the actual values.
            </summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstDayOfWeek.System">
            <summary>The First day of week specified in system settings</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstDayOfWeek.Sunday">
            <summary>Sunday (default)</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstDayOfWeek.Monday">
            <summary>Monday (complies with ISO standard 8601, section 3.17)</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstDayOfWeek.Tuesday">
            <summary>Tuesday</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstDayOfWeek.Wednesday">
            <summary>Wednesday</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstDayOfWeek.Thursday">
            <summary>Thursday</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstDayOfWeek.Friday">
            <summary>Friday</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstDayOfWeek.Saturday">
            <summary>Saturday</summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.SystemConstant">
            <summary>
            FirstDayOfWeek.System, FirstWeekOfYear.System.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.SundayConstant">
            <summary>
            FirstDayOfWeek.Sunday.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.MondayConstant">
            <summary>
            FirstDayOfWeek.Monday.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.TuesdayConstant">
            <summary>
            FirstDayOfWeek.Tuesday.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.WednesdayConstant">
            <summary>
            FirstDayOfWeek.Wednesday.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.ThursdayConstant">
            <summary>
            FirstDayOfWeek.Thursday.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.FridayConstant">
            <summary>
            FirstDayOfWeek.Friday.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.SaturdayConstant">
            <summary>
            FirstDayOfWeek.Saturday.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.GroupType">
            <summary>
            Designates type of a function or a constant
            </summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.GroupType.Custom">
            <summary>Custom</summary> 
        </member>
        <member name="F:USP.Express.Pro.Constants.GroupType.MathAndStat">
            <summary>Math and Stat</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.GroupType.Logical">
            <summary>Logical</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.GroupType.Text">
            <summary>Text</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.GroupType.Lookup">
            <summary>Lookup</summary> 
        </member>
        <member name="F:USP.Express.Pro.Constants.GroupType.DateAndTime">
            <summary>DateAndTime</summary> 
        </member>
        <member name="T:USP.Express.Pro.Constants.FirstWeekOfYear">
            <summary>
            When you call date-related functions, you can use the following enumeration members in your code in place of the actual values.
            </summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstWeekOfYear.System">
            <summary>First week of year specified in system settings</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstWeekOfYear.Jan1">
            <summary>Week in which January 1 occurs (default)</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstWeekOfYear.FirstFourDays">
            <summary>Week that has at least four days in the new year (complies with ISO standard 8601, section 3.17)</summary>
        </member>
        <member name="F:USP.Express.Pro.Constants.FirstWeekOfYear.FirstFullWeek">
            <summary>First full week in the new year</summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.Jan1Constant">
            <summary>
            FirstWeekOfYear.Jan1.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.FirstFourDaysConstant">
            <summary>
            FirstWeekOfYear.FirstFourDays.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Constants.FirstFullWeekConstant">
            <summary>
            FirstWeekOfYear.FirstFullWeek.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.ConstantsCollection">
            <summary>
            Contains a collection of constants.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.ConstantsCollection.Add(USP.Express.Pro.Constant)">
            <summary>
            Adds a constant to the collection
            </summary>
            <param name="constant">Constant to be added</param>
            <returns>The index at which the constant has been added.</returns>
        </member>
        <member name="M:USP.Express.Pro.ConstantsCollection.Remove(USP.Express.Pro.Constant)">
            <summary>
            Removes a constant from the collection
            </summary>
            <param name="constant">Constant to be removed</param>
        </member>
        <member name="P:USP.Express.Pro.ConstantsCollection.Item(System.Int32)">
            <summary>
            Get the constant at the specified index.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.ConstantsCollection.OnInsert(System.Int32,System.Object)">
            <summary>
             Performs additional custom processes before inserting a new element into the collection. 
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:USP.Express.Pro.ConstantsCollection.RaiseConstantAddEvent(System.String)">
            <summary>
            Raises ConstantAdd event.
            </summary>
            <param name="NewName">New constant name.</param>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.ParseException">
            <summary>
            The base class for any exception thrown in <see cref="M:USP.Express.Pro.Parser.Parse(System.String)"/> method.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Exceptions.ParseException.Message">
            <summary>
            Error Message.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Exceptions.ParseException.InvalidCharacterPosition">
            <summary>
            Position of invalid character.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.EvaluateException">
            <summary>
            The base class for any exception thrown in <see cref="M:USP.Express.Pro.ExpressionTree.Evaluate(USP.Express.Pro.VariableValuesCollection)"/> method.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.DuplicateIdentifierException">
            <summary>
            Identifier is not unique.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidIdentifierException">
            <summary>
            Identifier is not valid.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.EmptyExpressionException">
            <summary>
            Empty expression.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.MissingSymbolException">
            <summary>
            Missing '"' or '#'.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.UnbalancedParenthesesException">
            <summary>
            Unbalanced '(' or ')'.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.WrongArgumentsNumberException">
            <summary>
            Wrong arguments number.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.UnknownVariableException">
            <summary>
            Unknown variable.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.UnknownFunctionException">
            <summary>
            Unknown function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.UnexpectedSymbolException">
            <summary>
            Unexpected symbol.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidCharacterInStringException">
            <summary>
            Escape character in string literal.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidOperatorLocationException">
            <summary>
            Invalid operator location
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.OperatorNotSupportedInTrialVersionException">
            <summary>
            Operator is not supported in the trial version.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.FunctionNotSupportedInTrialVersionException">
            <summary>
            Function is not supported in trial version.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidTermLocationException">
            <summary>
            Invalid term location.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidFunctionLocationException">
            <summary>
            Invalid function location.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidParenthesisLocationException">
            <summary>
            Invalid parenthesis location.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidCommaLocationException">
            <summary>
            Invalid comma location.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidExpressionException">
            <summary>
            Invalid expression.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidDateException">
            <summary>
            Invalid date expression.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidArgumentTypeException">
            <summary>
            Invalid Argument type.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Exceptions.InvalidArgumentTypeException.InvalidArgumentIndex">
            <summary>
            Invalid argument index.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.DivisionByZeroException">
            <summary>
            Division by zero.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.ACosOutOfBoundsException">
            <summary>
            ACOS argument is out of bounds.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.ACotOfZeroException">
            <summary>
            ACOT of zero.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.ACscOutOfBoundsException">
            <summary>
            ACSC argument is out of bounds.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.ASecOutOfBoundsException">
            <summary>
            ASEC argument is out of bounds.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.ASinOutOfBoundsException">
            <summary>
            ASIN argument is out of bounds.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InfiniteCotException">
            <summary>
            Infinite cotangent.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InfiniteHCotException">
            <summary>
            Infinite hyperbolic cotangent.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InfiniteCscException">
            <summary>
            Infinite cosecant.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InfiniteHCscException">
            <summary>
            Infinite hyperbolic cosecant.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.LnNegNumberException">
            <summary>
            Negative argument for LN.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.LnZeroException">
            <summary>
            Zero argument for LN.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.Log10NegNumberException">
            <summary>
            Negative argument for LOG10.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.Log10ZeroException">
            <summary>
            Zero argument for LN.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.LogBaseEq1Exception">
            <summary>
            Base is equal to 1 for LOG.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.LogNegBaseException">
            <summary>
            Negative base for LOG.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.LogZeroBaseException">
            <summary>
            Zero base for LOG.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.LogNegNumberException">
            <summary>
            Negative argument for LOG.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.LogZeroException">
            <summary>
            Zero argument for LOG.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InfiniteSecException">
            <summary>
            Infinite secant.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InfiniteHSecException">
            <summary>
            Infinite hyperbolic secant.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.SqrtNegNumberException">
            <summary>
            Negative argument for SQRT.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InfiniteTanException">
            <summary>
            Infinite tangent.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InfiniteHTanException">
            <summary>
            Infinite hyperbolic tangent.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidArgumentException">
            <summary>
            Invalid Argument type.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.ArgumentOutOfRangeException">
            <summary>
            Argument is out of range.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Exceptions.InvalidParameterCountException">
            <summary>
            The number of variables passed to <see cref="M:USP.Express.Pro.ExpressionTree.Evaluate(USP.Express.Pro.VariableValuesCollection)"/> function does not match the number of variables originally passed to <see cref="M:USP.Express.Pro.Parser.Parse(System.String)"/> function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.ExpressionTree">
            <summary>
            Represents a parsed expression tree.
            </summary>
        </member>
        <member name="F:USP.Express.Pro.ExpressionTree.m_cVariables">
            <summary>
            Determines if exceptions are to be thrown when an expression is being evaluated, or if "NaN" and "Infinity" values are to be used instead.
            </summary>
            <remarks>
            If <c>true</c>, exceptions are thrown. 
            If <c>false</c>, exceptions are not thrown and "NaN" and "Infinity" values are used.
            Default is <c>true</c>.
            </remarks>
            <example>		
            Example 1:		
            ThrowEvaluationExceptions: true
            Expression: 1/0 
            Result: <see cref="T:USP.Express.Pro.Exceptions.DivisionByZeroException"/> exception is thrown
            Example 2:		
            ThrowEvaluationExceptions: true
            Expression: 1/0 
            Result: Infinity
            </example>
        </member>
        <member name="P:USP.Express.Pro.ExpressionTree.Variables">
            <summary>
            Gets the collection of variables. Read-only.
            </summary>				
        </member>
        <member name="P:USP.Express.Pro.ExpressionTree.NegativeOddRoot">
            <summary>
            Enables calculation of odd roots of negative real numbers.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.ExpressionTree.GetUsedVariables">
            <summary>
            Returns the collection of variables used in the expression. Read-only.
            </summary>
            <returns>Collection of used variables</returns>
            <remarks>
            <para>For each variable in the collection, you can specify a corresponding value to be used in evaluation. 
            Then, you can pass this collection to the <see cref="M:USP.Express.Pro.ExpressionTree.Evaluate(USP.Express.Pro.VariableValuesCollection)"/> method.
            </para>
            <para>
            This method is thread-safe. Each time it is called, a new copy of the collection is created.
            </para>
            </remarks>
        </member>
        <member name="M:USP.Express.Pro.ExpressionTree.Evaluate(USP.Express.Pro.VariableValuesCollection)">
            <overloads>
            <summary>Evaluates the expression.</summary>
            <remarks>This method is thread-safe</remarks>		
            </overloads>
            <summary>
            Evaluates the expression, given a collection of used variables with values, with case-insensitive string comparison enabled.
            </summary>
            <param name="values">Collection of actually used variables obtained with <see cref="M:USP.Express.Pro.ExpressionTree.GetUsedVariables"/>, filled with the values.</param>
            <returns>The calculated value.</returns>		
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:USP.Express.Pro.Exceptions.EvaluateException"></exception>
        </member>
        <member name="M:USP.Express.Pro.ExpressionTree.Evaluate(USP.Express.Pro.VariableValuesCollection,System.Boolean)">
            <summary>
            Evaluates the expression, given a collection of used variables with values.
            </summary>
            <param name="values">Collection of actually used variables obtained with <see cref="M:USP.Express.Pro.ExpressionTree.GetUsedVariables"/>, filled with the values.</param>
            <param name="IsCaseSensitive">Determines if string comparisons are case-sensitive.</param>
            <returns>The calculated value.</returns>		
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:USP.Express.Pro.Exceptions.EvaluateException"></exception>
        </member>
        <member name="M:USP.Express.Pro.ExpressionTree.Evaluate(System.Object[])">
            <summary>
            Evaluates the expression with case-insensitive string comparison enabled.
            </summary>
            <param name="Values">Array of values of variables. The elements in this array must match variables in <see cref="P:USP.Express.Pro.ExpressionTree.Variables"/> collection. 
            The number of variables passed to <see cref="M:USP.Express.Pro.ExpressionTree.Evaluate(USP.Express.Pro.VariableValuesCollection)"/> function must match the number of variables originally passed to <see cref="M:USP.Express.Pro.Parser.Parse(System.String)"/> function.
            </param>
            <returns>The calculated value.</returns>		
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:USP.Express.Pro.Exceptions.EvaluateException"></exception>
        </member>
        <member name="M:USP.Express.Pro.ExpressionTree.Evaluate(System.Object[],System.Boolean)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="Values">Array of values of variables. The elements in this array must match variables in <see cref="P:USP.Express.Pro.ExpressionTree.Variables"/> collection.
            The number of variables passed to <see cref="M:USP.Express.Pro.ExpressionTree.Evaluate(USP.Express.Pro.VariableValuesCollection)"/> function must match the number of variables originally passed to <see cref="M:USP.Express.Pro.Parser.Parse(System.String)"/> function.
            </param>
            <param name="IsCaseSensitive">Determines if string comparisons are case-sensitive.</param>
            <returns>The calculated value.</returns>
        </member>
        <member name="M:USP.Express.Pro.ExpressionTree.GetReturnType">
            <summary>
            Returns the type which the expression returns. 
            </summary>
            <returns>The Type object that represents the type which the expression returns.</returns>
            <remarks>This method is thread-safe</remarks>
        </member>
        <member name="M:USP.Express.Pro.ExpressionTree.Validate(System.Int32@,System.Int32@)">
            <summary>
            Checks if functions and operators in expression use valid arguments.
            </summary>
            <param name="ErrorPos">Position of invalid item in an expression.</param>
            <param name="InvalidArgumentIndex">Index of invalid function/operator argument.</param>
            <returns>true if all the arguments are valid, false otherwise</returns>
        </member>
        <member name="M:USP.Express.Pro.ExpressionTree.BuildXMLTree">
            <summary>
            Creates an XmlDocument object that represents an expression tree.
            </summary>
            <returns>XmlDocument object.</returns>
        </member>
        <member name="M:USP.Express.Pro.ExpressionTree.CreateXMLElement(System.Xml.XmlElement@,USP.Express.Pro.ItemInfo)">
            <summary>
            Creates XmlElement object representing given token.
            </summary>
            <param name="oRoot">Root element of XmlDocument.</param>
            <param name="item">Token.</param>
            <returns>XmlElement object.</returns>
        </member>
        <member name="P:USP.Express.Pro.ExpressionTree.ANSI_Nulls">
            <summary>
            Controls comparisons against <c>System.DBNull</c> values.
            </summary>
            <remarks>
            <para>
             With <see cref="P:USP.Express.Pro.ExpressionTree.ANSI_Nulls"/> set to <c>true</c>, the comparison operators EQUAL (=) and NOT EQUAL (&lt;&gt;) always return <c>DBNull</c> when one of its arguments is <c>DBNull</c>. 
             With <see cref="P:USP.Express.Pro.ExpressionTree.ANSI_Nulls"/> set to <c>false</c>, these operators return <c>TRUE</c> or <c>FALSE</c>, depending on whether both arguments are <c>DBNull</c>.
             </para>
             <para>
             Default is <c>true</c>.
             </para>
            </remarks>
        </member>
        <member name="T:USP.Express.Pro.ExpressionVariablesCollection">
            <summary>
            Stores information on variables in an expression tree.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.ExpressionVariablesCollection.Item(System.Int32)">
            <summary>
            Get the variable at the specified index.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.ExpressionVariablesCollection.IndexOf(USP.Express.Pro.Variable)">
            <summary>
            Determines the index of a specific Variable in the collection.
            </summary>
            <param name="variable">The Variable to locate in the collection.</param>
            <returns>The zero-based index of the Variable in the collection.</returns>
        </member>
        <member name="M:USP.Express.Pro.ExpressionVariablesCollection.Contains(USP.Express.Pro.Variable)">
            <summary>
            Determines whether the collection contains a specific <see cref="T:USP.Express.Pro.Variable"/> object.
            </summary>
            <param name="variable">The variable to locate in the collection.</param>
            <returns>True if the specified Variable is found in the collection; otherwise, false.</returns>
        </member>
        <member name="T:USP.Express.Pro.Function">
            <summary>
            A base abstract class for any function. 
            You must inherit from this class in order to add a user-defined function to the <see cref="P:USP.Express.Pro.Parser.Functions"/> collection.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Function.Syntax">
            <summary>Syntax</summary>
        </member>
        <member name="P:USP.Express.Pro.Function.Description">
            <summary>Description</summary>
        </member>
        <member name="P:USP.Express.Pro.Function.Group">
            <summary>Group type</summary>
        </member>
        <member name="P:USP.Express.Pro.Function.Name">
            <summary>Returns the name of the function. Read-only.</summary>
        </member>
        <member name="M:USP.Express.Pro.Function.MultArgsSupported(System.Int32)">
            <summary>
            Returns a value indicating whether the function supports a specified number of input parameters.
            </summary>
            <param name="Count">Number of input parameters.</param>
            <returns>True, if the function supports a specified number of input parameters; otherwise, false.</returns>
            <remarks>Default implementation returns true if number of input parameters is equal to 1. If you want to support different number of input parameters you must override this method.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Function.GetReturnType(System.Type[])">
            <summary>
            Returns a type of the return value. Read-only.
            </summary>
            <param name="Types">Types of input parameters.</param>
            <returns>Type of the return value.</returns>
            <remarks>Default implementation returns System.Double. If you want to return value of different type you must override this method.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Function.InputTypeSupported(System.Type,System.Int32)">
            <summary>
            Returns a value indicating whether the function supports the specified type of input parameter.
            </summary>
            <param name="Type">Input parameter type.</param>
            <param name="Index">Input parameter index.</param>
            <returns>True, if the function supports specified type of the parameter with the specified Index; otherwise, false.</returns>
            <remarks>Default implementation returns true for System.Double type. If you want to support parameters of different type you must override this method.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Function.Validate(System.Type[],System.Int32@)">
            <summary>
            Returns a value indicating whether the function supports specified types of input parameters.
            </summary>
            <param name="Types">Array of types of input parameters.</param>
            <param name="InvalidArgument">Invalid argument index.</param>
            <returns>True, if the function supports specified types; otherwise, false.</returns>
            <remarks>Default implementation calls <see cref="M:USP.Express.Pro.Function.InputTypeSupported(System.Type,System.Int32)"/> method iteratively for each of the input parameters. You must override this method only if the types of your input parameters depend on each other.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Function.Evaluate(System.Object[])">
            <overloads>Returns a value calculated by the function. 
            When deriving from the <see cref="T:USP.Express.Pro.Function"/> class, you must override one of the overloaded versions of <c>Evaluate</c> method.
            </overloads>
            <summary>
            Returns a value calculated by the function. 
            </summary>
            <param name="Values">Array of input values.</param>
            <returns>Calculated value.</returns>
            <remarks>You should override this method if you do not need to account for case-sensitivity; otherwise you must override <c>Evaluate(object[] Values, bool IsCaseSensitive)</c> method.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Function.Evaluate(System.Object[],System.Boolean)">
            <summary>
            Returns a value calculated by the function. Allows to account for case-sensitivity.
            </summary>
            <param name="Values">Array of input values.</param>
            <param name="IsCaseSensitive">Determines if string comparisons are case-sensitive.</param>
            <returns>Calculated value.</returns>
            <remarks>If you need to account for case-sensitivity you must override this method; otherwise you should override <c>Evaluate(object[] Values)</c> method.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Function.IsNullable(System.Object[])">
            <summary>
            Determines if the function returns <c>DBNull</c> when one of its input parameters is <c>DBNull</c>.		
            </summary>
            <param name="Values">Array of input values.</param>
            <returns><c>true</c>, if function returns <c>DBNull</c>, otherwise <c>false</c>.</returns>
            <remarks>
            <para>
            Default implementation returns <c>DBNull</c> if at least one of the function's input arguments is <c>DBNull</c>.
            </para>
            <para>
            You should override this method only if you would like to implement different <c>DBNull</c> processing logic.
            For example, the following built-in USPExpress functions override this method:
            <list type="bullet">
            <item>
            Logical functions: AND, OR
            </item>
            <item>
            Aggregate functions: Count, Min, Max, Sum
            </item>
            <item>
            IIF funciton
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:USP.Express.Pro.Function.UnfoldArray">
            <summary>
            Returns true if a single input parameter of Array type has to be unfolded into an array of parameters. The conversion is performed prior to the Evaluate call.
            </summary>
            <remarks>Used for functions that accept any number of input parameters, e.g. Sum, Min, Max, etc...</remarks>
        </member>
        <member name="T:USP.Express.Pro.FunctionsCollection">
            <summary>
            Contains a collection of functions.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.FunctionsCollection.Add(USP.Express.Pro.Function)">
            <summary>
            Adds a function to the collection.
            </summary>
            <param name="function">Function to be added</param>
            <returns>The index at which the function has been added.</returns>
        </member>
        <member name="M:USP.Express.Pro.FunctionsCollection.Remove(USP.Express.Pro.Function)">
            <summary>
            Removes a function from the collection.
            </summary>
            <param name="function">Function to be removed</param>
        </member>
        <member name="P:USP.Express.Pro.FunctionsCollection.Item(System.Int32)">
            <summary>
            Gets or sets the function at the specified index.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.FunctionsCollection.OnInsert(System.Int32,System.Object)">
            <summary>
             Performs additional custom processes before inserting a new element into the collection. 
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:USP.Express.Pro.FunctionsCollection.RaiseFunctionAddEvent(System.String)">
            <summary>
            Raises FunctionAdd event.
            </summary>
            <param name="NewName">New function name.</param>
        </member>
        <member name="T:USP.Express.Pro.IIdentifier">
            <summary>Base interface for all identifiers</summary>
        </member>
        <member name="P:USP.Express.Pro.IIdentifier.Name">
            <summary>Name of the identifier.</summary>
        </member>
        <member name="T:USP.Express.Pro.ITypedIdentifier">
            <summary>Base interface for all typed identifiers</summary>
        </member>
        <member name="P:USP.Express.Pro.ITypedIdentifier.Type">
            <summary>Type of the identifier.</summary>
        </member>
        <member name="T:USP.Express.Pro.IdentifiersCollection">
            <summary>
            Contains a collection of identifiers. 
            </summary>
            <remarks>This is a base collection class for specific collections in USPExpress</remarks> 
        </member>
        <member name="M:USP.Express.Pro.IdentifiersCollection.Search(System.String)">
            <summary>
            Returns a zero-based index of the identifier with the specified name.
            </summary>
            <param name="name">Identifier name.</param>
            <returns>The zero-based index of the identifier in the collection. -1, if no identifier with that name found in the collection.</returns>
        </member>
        <member name="M:USP.Express.Pro.IdentifiersCollection.IndexOf(USP.Express.Pro.IIdentifier)">
            <summary>
            Determines the index of a specified Identifier in the collection.
            </summary>
            <param name="identifier">The Identifier to locate in the collection.</param>
            <returns>The zero-based index of the Identifier in the collection.</returns>
        </member>
        <member name="M:USP.Express.Pro.IdentifiersCollection.Contains(USP.Express.Pro.IIdentifier)">
            <summary>
            Determines whether the collection contains a specific object.
            </summary>
            <param name="identifier">The identifier to locate in the collection.</param>
            <returns>True if the specified identifier is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:USP.Express.Pro.IdentifiersCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="T:USP.Express.Pro.Operator">
            <summary>
            A base abstract class for any operator. 
            </summary>
        </member>
        <member name="M:USP.Express.Pro.Operator.GetOperatorType">
            <summary>
            Returns operator type.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.Operator.GetPriority">
            <summary>
            Returns operator priority.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Operator.Name">
            <summary>Returns a string representation of the operator. Read-only.</summary>
        </member>
        <member name="P:USP.Express.Pro.Operator.OperandsSupported">
            <summary>
            Returns the number of operands supported by the operator.
            </summary>
            <remarks>Default implementation returns 2.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Operator.GetReturnType(System.Type[])">
            <summary>
            Returns a type of the return value depending on types of operands. Read-only.
            </summary>
            <param name="Types">Types of operands.</param>
            <returns>Type of the return value.</returns>
            <remarks>Default implementation returns System.Double. If you want to return value of another type you must override this method.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Operator.InputTypeSupported(System.Type,System.Int32)">
            <summary>
            Returns a value indicating whether the operator supports the specified type of an operand.
            </summary>
            <param name="Index">Operand index.</param>
            <param name="Type">Operand type.</param>
            <returns>True, if the operator supports the specified Type of an operand with the specified Index; otherwise, false.</returns>
            <remarks>Default implementation returns true if operand type is System.Double. If you want to support operands of another type you must override this method.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Operator.Validate(System.Type[],System.Int32@)">
            <summary>
            Returns a value indicating whether the operator supports specified operands Types.
            </summary>
            <param name="Types">Types of operands.</param>
            <param name="InvalidArgument">Invalid operand index.</param>
            <returns>True, if the operator supports specified Types of operands; otherwise, false.</returns>
            <remarks>Default implementation calls <see cref="M:USP.Express.Pro.Operator.InputTypeSupported(System.Type,System.Int32)"/> method iteratively for each of the input parameters. If the types of your input parameters depend on each other, you must override this method.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Operator.Evaluate(System.Object[])">
            <overloads>Returns a value calculated by the operator.</overloads>
            <summary>
            Returns a value calculated by the operator. Case-insensitive string comparison is enabled.
            </summary>
            <param name="Values">Array of input values.</param>
            <returns>Calculated value.</returns>
            <remarks>If you do not want to support IsCaseSensitive parameter you must override this method; otherwise you must override <c>Evaluate(object[] Values, bool IsCaseSensitive)</c> method.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Operator.Evaluate(System.Object[],System.Boolean)">
            <summary>
            Returns a value calculated by the operator.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="IsCaseSensitive">Value indicating a case-sensitive or insensitive string comparison.</param>
            <returns>Calculated value.</returns>
            <remarks>If you want to support IsCaseSensitive parameter you must override this method; otherwise you must override <c>Evaluate(object[] Values)</c> method.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Operator.IsNullable(System.Object[])">
            <summary>
            Determines if the operator returns <c>DBNull</c> when one of its input parameters is <c>DBNull</c>.		
            </summary>
            <param name="Values">Array of input values.</param>
            <returns><c>true</c>, if the operator returns <c>DBNull</c>, otherwise <c>false</c>.</returns>
            <remarks>
            <para>
            Default implementation returns <c>DBNull</c> if at least one of the operator's input arguments is <c>DBNull</c>.
            </para>
            <para>
            You should override this method only if you would like to implement different <c>DBNull</c> processing logic.
            For example, the following built-in USPExpress operators override this method:
            <list type="bullet">
            <item>
            Logical operators: AND, OR
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:USP.Express.Pro.OperatorsCollection">
            <summary>
            Collection of operators.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.OperatorsCollection.Item(System.Int32)">
            <summary>
            Get the operator at the specified index.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.OperatorsCollection.IndexOf(USP.Express.Pro.Operator)">
            <summary>
            Determines the index of a specified Operator in the collection.
            </summary>
            <param name="oper">The Operator to locate in the collection.</param>
            <returns>The zero-based index of the Operator in the collection.</returns>
        </member>
        <member name="M:USP.Express.Pro.OperatorsCollection.Contains(USP.Express.Pro.Operator)">
            <summary>
            Determines whether the collection contains a specific <see cref="T:USP.Express.Pro.Operator"/> object.
            </summary>
            <param name="oper">The operator to locate in the collection.</param>
            <returns>True if the specified Operator is found in the collection; otherwise, false.</returns>
        </member>
        <member name="T:USP.Express.Pro.Parser">
            <summary>
            Parses an expression string 
            </summary>
        </member>
        <member name="M:USP.Express.Pro.Parser.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Parser.Variables">
            <summary>
            Returns the collection of variables. Read-only.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Parser.Functions">
            <summary>
            Returns the collection of functions. Read-only.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Parser.Constants">
            <summary>
            Returns the collection of constants. Read-only.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Parser.Operators">
            <summary>
            Returns the collection of built-in operators. Read-only.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.Parser.Parse(System.String)">
            <summary>
            Parses the expression.		
            </summary>
            <param name="Text">Expression to be parsed.</param>
            <returns>ExpressionTree object.</returns>				
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:USP.Express.Pro.Exceptions.ParseException"></exception>
            <remarks>This method is thread-safe</remarks>
        </member>
        <member name="M:USP.Express.Pro.Parser.Parse(System.String,System.Boolean)">
            <summary>
            Parses the expression with "Implicit Multiplication" option.
            </summary>
            <param name="Text">Expression to be parsed.</param>
            <param name="ImplicitMultiplication">Indicates whether implicit multiplication is supported.</param>		
            <returns>ExpressionTree object.</returns>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:USP.Express.Pro.Exceptions.ParseException"></exception>
        </member>
        <member name="M:USP.Express.Pro.Parser.RecreateVariablesCache">
            <summary>
            Creates a "copy snapshot" of Parser.Variables collection. 
            Stores it in ExpressionVariables collection.		
            </summary>
            <remarks>
            A reference to ExpressionVariables collection is then passed to the ExpressionTree object.
            </remarks> 
        </member>
        <member name="M:USP.Express.Pro.Parser.DeleteVariablesCache">
            <summary>
            Deletes current ExpressionVariables collection.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.Parser.IsIdentifierCharacter(System.Char)">
            <summary>
            Returns a value indicating whether the specified symbol can be used in a variable, constant or function names
            </summary>
            <param name="cSymbol">A Unicode character.</param>
            <returns>true, if symbol can be used in variable, constant or function names; otherwise, false.</returns>
        </member>
        <member name="M:USP.Express.Pro.Parser.IsLetter(System.Char)">
            <summary>
            Returns a value indicating whether the specified symbol is categorized as an alphabetic letter or '_'.
            </summary>
            <param name="cSymbol">A Unicode character.</param>
            <returns>true, if symbol  is categorized as an alphabetic letter or '_'; otherwise, false.</returns>
        </member>
        <member name="M:USP.Express.Pro.Parser.IsVariable(System.String,System.Int32@,USP.Express.Pro.ItemType@)">
            <summary>
            Returns a value indicating whether the specified item name is found in the Variables collection or Constants collection.
            </summary>
            <param name="sItem">Item name.</param>
            <param name="nIndex">Index in Variables collection or Constants collection.</param>
            <param name="nItemType">ItemType (Variable or Constant).</param>
            <returns>True, if item name is found in Variables collection or Constants collection; otherwise, false.</returns>
        </member>
        <member name="M:USP.Express.Pro.Parser.IsNumber(System.String,System.Double@)">
            <summary>
            Returns a value indicating whether the specified string can be converted to Double type.
            </summary>
            <param name="sItem">A string containing a number to convert.</param>
            <param name="dNumber">Converted number.</param>
            <returns>True, if a specified string can be converted to Double type; otherwise false.</returns>
        </member>
        <member name="M:USP.Express.Pro.Parser.IsDate(System.String,System.DateTime@)">
            <summary>
            Returns a value indicating whether the specified string can be converted to DateTime type.
            </summary>
            <param name="sItem">A string containing a number to convert.</param>
            <param name="dtDate">Converted date.</param>
            <returns>True, if a specified string can be converted to DateTime type; otherwise false.</returns>
        </member>
        <member name="M:USP.Express.Pro.Parser.IsFunction(System.String,System.Int32@,USP.Express.Pro.ItemType@)">
            <summary>
            Returns a value indicating whether the specified item name is found in the <see cref="P:USP.Express.Pro.Parser.Functions"/> collection.
            </summary>
            <param name="sItem">Item name.</param>
            <param name="nIndex">Index in <see cref="P:USP.Express.Pro.Parser.Functions"/> collection.</param>
            <param name="nItemType">ItemType (Function).</param>
            <returns>True, if item name is found in Functions collection; otherwise, false.</returns>
        </member>
        <member name="M:USP.Express.Pro.Parser.FindOperator(System.String,System.String@,System.Int32@,System.Int32@,USP.Express.Pro.ItemType)">
            <summary>
            Checks if there is an operator at current position in an expression string.
            If found, advances to the next token position.
            </summary>
            <param name="sText">Expression string.</param>
            <param name="sItem">Name of the operator, if found.</param>
            <param name="nPos">Current position in an expression string.</param>
            <param name="nIndex">Index in Operators collection.</param>
            <param name="lastItem">Type of the preceding token.</param>
            <returns>True, if item name is found in Operators collection; otherwise, false.</returns>
        </member>
        <member name="M:USP.Express.Pro.Parser.IsSignModifier(System.Int32,USP.Express.Pro.ItemType)">
            <summary>
            Returns a value indicating whether '+' or '-' is used as unary sign Modifier.
            </summary>
            <param name="nPos">Current position in an expression string.</param>
            <param name="lastItem">Type of the last parsed item.</param>
            <returns>True, if '+' or '-' is used as sign Modifier; otherwise, false.</returns>
        </member>
        <member name="M:USP.Express.Pro.Parser.IsScientificNotation(System.String,System.Int32)">
            <summary>
            Returns a value indicating if occurrence of '+' or '-' character belongs to a number in scientific notation.
            </summary>
            <param name="sText">Expression string.</param>
            <param name="nPos">Current position in an Expression string.</param>
            <returns>True, if scientific notation is used; otherwise, false.</returns>
        </member>
        <member name="M:USP.Express.Pro.Parser.CheckName(System.String)">
            <summary>
            Checks if the specified identifier is valid and is unique among defined Variables, Constants, Functions and Operators.
            </summary>
            <param name="sNewName">New identifier.</param>
            <remarks>
            Is called when adding new variables, aliases, functions or constants.
            </remarks>
        </member>
        <member name="M:USP.Express.Pro.Parser.AddToPolsca(USP.Express.Pro.ItemType,System.Object,System.Int32,System.Collections.ArrayList@,System.Int32)">
            <summary>
            Add item to Polish Notation array.
            </summary>
            <param name="nItemType">Item type.</param>
            <param name="oValue">Item value.</param>
            <param name="nPosition">Position in an expression string being parsed.</param>
            <param name="aPolscaFormula">Polish Notation array.</param>
            <remarks>Overloaded version, is used to add numbers, dates and strings.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Parser.AddToPolsca(USP.Express.Pro.ItemType,System.Int32,System.Int32,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Adds item to Polish Notation array.
            </summary>
            <param name="nItemType">Item type.</param>
            <param name="nIndex">Item index in corresponding collection.</param>
            <param name="nPosition">Position in an expression string.</param>
            <param name="aPolscaFormula">Polish Notation array.</param>
            <param name="aStack">Auxiliary stack of functions. Is used to build a Polish Notation array.</param>
            <remarks>Overloaded version, is used to add variables, functions and operators.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Parser.AddToPolsca(USP.Express.Pro.ItemType,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Add item to Polish Notation array.
            </summary>
            <param name="nItemType">Item type.</param>
            <param name="aPolscaFormula">Polish Notation array.</param>
            <param name="aStack">Auxiliary stack of functions. Is used to build a Polish Notation array.</param>
            <remarks>Overloaded version, is used to add parentheses, parentheses and commas.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Parser.CanAdd(USP.Express.Pro.ItemType,System.Int32,USP.Express.Pro.ItemType@)">
            <summary>
            Returns a value indicating whether the occurrence of the given token is valid so that it could be pushed to the Polish Notation stack.
            </summary>
            <param name="newType">Type of the new token.</param>
            <param name="operandsSupported">Number of operands supported.</param>
            <param name="lastType">Type of the preceding token.</param>
            <returns>True, if the occurrence is valid; otherwise, false.</returns>
            <remarks>Overloaded version to check if operator is valid.</remarks>
        </member>
        <member name="M:USP.Express.Pro.Parser.CanAdd(USP.Express.Pro.ItemType,USP.Express.Pro.ItemType@,System.Int32,System.Boolean,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Returns a value indicating whether the occurrence of the given token is valid so that it could be pushed to the Polish Notation stack.
            </summary>
            <param name="newType">Type of the new token.</param>
            <param name="lastType">Type of the preceding token.</param>
            <param name="nPosition">Current position in an expression text.</param>
            <param name="bImplicitMultiplication">Value indicating whether implicit multiplication is supported.</param>
            <param name="aPolscaFormula">Polish Notation stack.</param>
            <param name="aStack">Auxiliary stack of functions. Is used to build a Polish Notation array.</param>
            <returns>True, if new item can be added; otherwise, false.</returns>
        </member>
        <member name="T:USP.Express.Pro.ItemType">
            <summary>
            Enumerates available token types
            </summary>
        </member>
        <member name="T:USP.Express.Pro.ItemInfo">
            <summary>
            Represents a token item. Tokens are stored in Polish Notation array.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.FunctionInfo">
            <summary>
            Represents an item in Function Stack. 
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.AbsFunction">
            <summary>
            Abs function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.ArcCosFunction">
            <summary>
            ArcCos function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.ArcCotFunction">
            <summary>
            ArcCot function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.ArcCscFunction">
            <summary>
            ArcCsc function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.ArcSecFunction">
            <summary>
            ArcSec function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.ArcSinFunction">
            <summary>
            ArcSin function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.ArcTanFunction">
            <summary>
            ArcTan function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.CeilingFunction">
            <summary>
            Ceiling function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.CosFunction">
            <summary>
            Cos function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.HCosFunction">
            <summary>
            HyperbolicCos function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.CotFunction">
            <summary>
            Cot function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.HCotFunction">
            <summary>
            HyperbolicCot function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.CscFunction">
            <summary>
            Csc function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.HCscFunction">
            <summary>
            HyperbolicCsc function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.ExpFunction">
            <summary>
            Exp function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.FloorFunction">
            <summary>
            Floor function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.IntFunction">
            <summary>
            Int function. ( = Floor function)
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.LnFunction">
            <summary>
            Ln function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.LogFunction">
            <summary>
            Log function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.Log10Function">
            <summary>
            Log10 function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.NegFunction">
            <summary>
            Neg function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.PowerFunction">
            <summary>
            Power function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.RootFunction">
            <summary>
            Root function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.RandomFunction">
            <summary>
            Random function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.SecFunction">
            <summary>
            Sec function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.HSecFunction">
            <summary>
            HyperbolicSec function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.SinFunction">
            <summary>
            Sin function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.HSinFunction">
            <summary>
            HyperbolicSin function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.SqrtFunction">
            <summary>
            Sqrt function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.SumFunction">
            <summary>
            Sum function.
            </summary>
            <remarks>
            DBNull parameters are ignored.
            If all input parameters are of type DBNull, the result is DBNull.		
            </remarks>
        </member>
        <member name="T:USP.Express.Pro.Functions.CountFunction">
            <summary>
            Count function.
            </summary>
            <remarks>
            DBNull parameters participate in total count.	
            </remarks>
        </member>
        <member name="T:USP.Express.Pro.Functions.AverageFunction">
            <summary>
            Average function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.TanFunction">
            <summary>
            Tan function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.HTanFunction">
            <summary>
            HyperbolicTan function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.MinFunction">
            <summary>
            Min function.
            </summary>
            <remarks>
            DBNull parameters are ignored.
            If all input parameters are of type DBNull, the result is DBNull.		
            </remarks>
        </member>
        <member name="T:USP.Express.Pro.Functions.MaxFunction">
            <summary>
            Max function.
            </summary>
            <remarks>
            DBNull parameters are ignored.
            If all input parameters are of type DBNull, the result is DBNull.		
            </remarks>
        </member>
        <member name="T:USP.Express.Pro.Functions.RoundFunction">
            <summary>
            Round function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.IIFFunction">
            <summary>
            IIf function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.IFFunction">
            <summary>
            If function. ( = IIf function)
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.AndFunction">
            <summary>
            And function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.OrFunction">
            <summary>
            Or function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.NowFunction">
            <summary>
            Now function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.TodayFunction">
            <summary>
            Today function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.YearFunction">
            <summary>
            Year function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.MonthFunction">
            <summary>
            Month function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.DayFunction">
            <summary>
            Day function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.WeekDayFunction">
            <summary>
            Weekday function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.HourFunction">
            <summary>
            Hour function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.MinuteFunction">
            <summary>
            Minute function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.SecondFunction">
            <summary>
            Second function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.DateAddFunction">
            <summary>
            DateAdd function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.DateDiffFunction">
            <summary>
            DateDiff function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.DatePartFunction">
            <summary>
            DatePart function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.DateFunction">
            <summary>
            Date function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.FormatFunction">
            <summary>
            Format function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.StartOfWeekFunction">
            <summary>
            DateDiff function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.LenFunction">
            <summary>
            Len function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.LeftFunction">
            <summary>
            Left function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.MidFunction">
            <summary>
            Mid function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.SubstituteFunction">
            <summary>
            Substitute function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.FindFunction">
            <summary>
            Find function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.LowerFunction">
            <summary>
            Lower function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.UpperFunction">
            <summary>
            Upper function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.TrimFunction">
            <summary>
            Trim function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.InFunction">
            <summary>
            In function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.IsDBNullFunction">
            <summary>
            IsDBNull function
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.IsNullFunction">
            <summary>
            IsNull function
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.IfNullFunction">
            <summary>
            IFNULL function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Functions.NewGuidFunction">
            <summary>
            Today function.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.PlusModifier">
            <summary>
            Plus modifier.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.MinusModifier">
            <summary>
            Minus modifier.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.PlusOperator">
            <summary>
            Plus operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.MinusOperator">
            <summary>
            Minus operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.MultiplyOperator">
            <summary>
            Multiply operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.DivideOperator">
            <summary>
            Divide operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.ModulusOperator">
            <summary>
            Modulus operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.PowerOperator">
            <summary>
            Power operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.IsLessThanOperator">
            <summary>
            IsLessThan operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.IsGreaterThanOperator">
            <summary>
            IsGreaterThan operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.IsEqualToOperator">
            <summary>
            IsEqualTo operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.IsBasicEqualToOperator">
            <summary>
            Equality ("=") operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.IsNotEqualToOperator">
            <summary>
            Inequality ("!=") operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.IsBasicNotEqualToOperator">
            <summary>
            Inequality ("&lt;&gt;") operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.IsLessThanOrEqualToOperator">
            <summary>
            IsLessThanOrEqualTo operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.IsGreaterThanOrEqualToOperator">
            <summary>
            IsGreaterThanOrEqualTo operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.AndOperator">
            <summary>
            And operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.AndBasicOperator">
            <summary>
            AndBasic operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.OrOperator">
            <summary>
            Or operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.OrBasicOperator">
            <summary>
            OrBasic operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.NotOperator">
            <summary>
            Not operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.NotBasicOperator">
            <summary>
            NotBasic operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.BitwiseAndOperator">
            <summary>
            BitwiseAnd operator. ( + String Concatenation operator)
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.BitwiseInclusiveOrOperator">
            <summary>
            BitwiseInclusiveOr operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.BitwiseExclusiveOrOperator">
            <summary>
            BitwiseExclusiveOr operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.Operators.BitwiseComplement">
            <summary>
            BitwiseComplement operator.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.TypeConverter">
            <summary>
            TypeConverter. Contains methods related to conversion between types.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.TypeConverter.CanConvert(System.Type,System.Type)">
            <summary>
            Returns a value indicating whether the specified SourceType can be converted to the specified DestinationType.
            </summary>
            <param name="SourceType">Source type.</param>
            <param name="DestinationType">Destination type.</param>
            <returns>True, if the specified SourceType can be converted to the specified DestinationType; otherwise, false.</returns>
        </member>
        <member name="T:USP.Express.Pro.IVariable">
            <summary>
            Interface that describes a Variable
            </summary>
        </member>
        <member name="P:USP.Express.Pro.IVariable.Aliases">
            <summary>Variable Aliases.</summary> 
        </member>
        <member name="T:USP.Express.Pro.Variable">
            <summary>
            Represents Variable.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.Variable.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:USP.Express.Pro.Variable"/> class.
            </summary>
            <param name="name">Name of the variable</param>
            <param name="type">Type of the variable</param>
        </member>
        <member name="P:USP.Express.Pro.Variable.Name">
            <summary>
            Name of the variable. Read-only.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Variable.Type">
            <summary>
            Variable Type. Read-only.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.Variable.Aliases">
            <summary>
            Variable Aliases. 
            </summary>
            <remarks>
            Each variable can have one or more aliases. In expressions, aliases can be used 
            interchangeably with actual name of the variable.
            </remarks>
        </member>
        <member name="M:USP.Express.Pro.Variable.Clone">
            <summary>
            Creates a shallow copy of the current variable.
            </summary>
            <returns>A shallow copy of the current variable.</returns>
        </member>
        <member name="M:USP.Express.Pro.Variable.RaiseAliasAddEvent(System.String)">
            <summary>
            Raises AliasAdd event.
            </summary>
            <param name="Alias">New alias.</param>
        </member>
        <member name="M:USP.Express.Pro.Variable.RaiseAliasRemoveEvent(System.String)">
            <summary>
            Raises AliasRemove event.
            </summary>
            <param name="Alias">Removed alias</param>
        </member>
        <member name="M:USP.Express.Pro.AliasesCollection.Add(System.String)">
            <summary>
            Adds an alias to the collection.
            </summary>
            <param name="value">Alias to be added</param>
            <returns>The index at which the alias has been added.</returns>
        </member>
        <member name="M:USP.Express.Pro.AliasesCollection.Remove(System.String)">
            <summary>
            Removes an alias from the collection
            </summary>
            <param name="value">Alias to be removed</param>
        </member>
        <member name="P:USP.Express.Pro.AliasesCollection.Item(System.Int32)">
            <summary>Gets the alias at the specified index.</summary>
        </member>
        <member name="M:USP.Express.Pro.AliasesCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains a specific alias.
            </summary>
            <param name="alias">The alias to locate in the collection.</param>
            <returns>True if the specified alias is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:USP.Express.Pro.AliasesCollection.RaiseAliasAddEvent(System.String)">
            <summary>
            Raises AliasAdd event.
            </summary>
            <param name="Alias">New alias.</param>
        </member>
        <member name="M:USP.Express.Pro.AliasesCollection.RaiseAliasRemoveEvent(System.String)">
            <summary>
            Raises AliasRemove event.
            </summary>
            <param name="Alias">Removed alias.</param>
        </member>
        <member name="T:USP.Express.Pro.VariablesCollection">
            <summary>
            Contains a collection of variables.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.VariablesCollection.Add(USP.Express.Pro.Variable)">
            <summary>
            Adds a variable to the collection
            </summary>
            <param name="variable">Variable to be added</param>
            <returns>The index at which the variable has been added.</returns>
        </member>
        <member name="M:USP.Express.Pro.VariablesCollection.Remove(USP.Express.Pro.Variable)">
            <summary>
            Removes a variable from the collection
            </summary>
            <param name="variable">Variable to be removed</param>
        </member>
        <member name="P:USP.Express.Pro.VariablesCollection.Item(System.Int32)">
            <summary>
            Get the variable at the specified index.
            </summary>
        </member>
        <member name="M:USP.Express.Pro.VariablesCollection.OnInsert(System.Int32,System.Object)">
            <summary>
             Performs additional custom processes before inserting a new element into the collection. 
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:USP.Express.Pro.VariablesCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the collection
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:USP.Express.Pro.VariablesCollection.RefreshIndices(System.Int32)">
            <summary>
            Updates indices in the inner hashtable of names, starting with the specified index.
            </summary>
            <param name="start">Index to start with.</param>
            <remarks>Called when the Variable is removed from the collection.</remarks>
        </member>
        <member name="M:USP.Express.Pro.VariablesCollection.OnAliasAdd(System.String,System.String)">
            <summary>
            Handles <see cref="E:USP.Express.Pro.Variable.AliasAdd"/> event.
            Updates inner hashtable.
            </summary>
            <param name="variableName">Variable name.</param>
            <param name="alias">New alias.</param>
        </member>
        <member name="M:USP.Express.Pro.VariablesCollection.OnAliasRemove(System.String)">
            <summary>
            Handles <see cref="E:USP.Express.Pro.Variable.AliasRemove"/> event.
            Updates inner hashtable of variables names.
            </summary>
            <param name="alias">Alias.</param>
        </member>
        <member name="M:USP.Express.Pro.VariablesCollection.RaiseVariableAddEvent(System.String)">
            <summary>
            Raises <see cref="E:USP.Express.Pro.VariablesCollection.VariableAdd"/> event.
            </summary>
            <param name="Name">New variable name.</param>
        </member>
        <member name="M:USP.Express.Pro.VariablesCollection.RaiseChangedEvent">
            <summary>
            Raises <see cref="E:USP.Express.Pro.VariablesCollection.Changed"/> event.
            </summary>
        </member>
        <member name="T:USP.Express.Pro.VariableValue">
            <summary>
            Contains information about a variable and its value.
            </summary>
            <remarks>
            Allows one to specify a value of the variable to be used in evaluation. 
            See also <see cref="M:USP.Express.Pro.ExpressionTree.GetUsedVariables"/> and <see cref="M:USP.Express.Pro.ExpressionTree.Evaluate(USP.Express.Pro.VariableValuesCollection)"/> methods.
            </remarks>
        </member>
        <member name="P:USP.Express.Pro.VariableValue.Index">
            <summary>Index of the variable in the <see cref="T:USP.Express.Pro.VariablesCollection"/> collection</summary>
        </member>
        <member name="P:USP.Express.Pro.VariableValue.Value">
            <summary>Value of the variable.</summary>
        </member>
        <member name="M:USP.Express.Pro.VariableValue.Clone">
            <summary>
            Creates a shallow copy of the object.
            </summary>
            <returns>A shallow copy of the object.</returns>
        </member>
        <member name="P:USP.Express.Pro.VariableValue.Name">
            <summary>Name of the variable.</summary>
        </member>
        <member name="P:USP.Express.Pro.VariableValue.Type">
            <summary>Type of the variable.</summary>
        </member>
        <member name="P:USP.Express.Pro.VariableValue.Aliases">
            <summary>Variable Aliases.</summary>
        </member>
        <member name="T:USP.Express.Pro.VariableValuesCollection">
            <summary>
            Contains a collection of <see cref="T:USP.Express.Pro.VariableValue"/> objects.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.VariableValuesCollection.Item(System.Int32)">
            <summary>
            Gets the variable at the specified index.
            </summary>
        </member>
        <member name="P:USP.Express.Pro.VariableValuesCollection.Item(System.String)">
             <summary>
            Gets the variable associated with the specified name or alias.
            If the specified name is not found, attempting to get it returns a null reference.
             </summary>
        </member>
        <member name="M:USP.Express.Pro.VariableValuesCollection.IndexOf(USP.Express.Pro.VariableValue)">
            <summary>
            Determines the index of a specified VariableValue in the collection.
            </summary>
            <param name="value">The VariableValue to locate in the collection.</param>
            <returns>The zero-based index of the VariableValue in the collection.</returns>
        </member>
        <member name="M:USP.Express.Pro.VariableValuesCollection.Contains(USP.Express.Pro.VariableValue)">
            <summary>
            Determines whether the collection contains a specific <see cref="T:USP.Express.Pro.VariableValue"/> object.
            </summary>
            <param name="var">The variable to locate in the collection.</param>
            <returns>True if the specified variable is found in the collection; otherwise, false.</returns>
        </member>
    </members>
</doc>
